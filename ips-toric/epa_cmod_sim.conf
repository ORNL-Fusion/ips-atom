IPS_ROOT = /p/swim/jwright/trunk #/p/swim1/lpku/IPS/my_ips/trunk       # Root of IPS component and binary tree
SIM_NAME = CMOD044a                                   # Name of current simulation
SIM_ROOT = $IPS_ROOT/runs/$SIM_NAME           # Where to put results from this simulation

INIT =                                              # How is the simulation initialized 
                                                    # (generate the very first state - if needed)
STATE_WORK_DIR = $SIM_ROOT/work/plasma_state # Where to put plasma state files as the simulation evolves
RUN_ID = $SIM_NAME
OUTPUT_PREFIX = 
CURRENT_STATE = ${RUN_ID}_ps.cdf
PRIOR_STATE = ${RUN_ID}_psp.cdf
CURRENT_EQDSK = ${RUN_ID}_ps.geq


STATE_FILES = $CURRENT_STATE $PRIOR_STATE $CURRENT_EQDSK   # What files constitute the plasma state

PLATFORM =                                          # Simulation Platform
BATCH_SYSTEM =                                      # Which Batch system to use
MPIRUN = mpirun                                     # How are MPI jobs launched (interactively)
SIMULATION_MODE = SINGLE_STEP | RESTART             # Simulation mode 
INITIALIZATION_MODE =                               # Initialization Mode
MACHINE_CONFIG_FILE =                               # Machine configuration file

[PORTS]
   NAMES = DRIVER EPA  RF_IC
   [[DRIVER]]                                       # REQUIRED Port section 
      IMPLEMENTATION = EPA_DRIVER
   [[INIT]]                                         # REQUIRED Port section 
      IMPLEMENTATION = 

   [[RF_IC]]
      IMPLEMENTATION = TORIC
      
   [[EPA]]
      IMPLEMENTATION = TSC
       
   [[FOKKER_PLANCK]]
      IMPLEMENTATION = CQL3D   

# Individual configuration sections

# Component sepcification (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component
[TORIC]
    CLASS = rf
    SUB_CLASS = ic
    NAME = toric
    NPROC = 4
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$NAME/CMODIC_A
        INPUT_FILES =  machine.inp equigs_gen.ind
        OUTPUT_FILES = torica.inp machine.inp toric.nc profstat.dat toric.sol equigs.data equidt.data toric.out toric_cfg.nc
    SCRIPT = $IPS_ROOT/bin/rf_ic_toric.py

[AORSA]
    CLASS = rf
    SUB_CLASS = ic
    NAME = aorsa
    NPROC = 4
    BIN_PATH = $IPS_ROOT/bin
	INPUT_DIR = $IPS_ROOT/components/$CLASS/$NAME
	INPUT_FILES = aorsa2d.in grfont.dat ZTABLE.TXT g096028.02650
	OUTPUT_FILES = out_swim out15 aorsa2d.ps aorsa2d.in
    SCRIPT = $BIN_PATH/rf_ic_aorsa.py

[TSC]
    CLASS = epa
    SUB_CLASS = 
    NAME = tsc
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/epa/tsc
    INPUT_FILES = inputa.$SIM_NAME sprsina.$SIM_NAME wall_data.$SIM_NAME  
    OUTPUT_FILES = outputa sprsoua tsc.cgm inputa log.tsc $STATE_FILES
    SCRIPT = $BIN_PATH/epa_tsc_cmod.py
    
[EPA_DRIVER]
    CLASS = drivers
    SUB_CLASS = ku
    NAME = epaDriver
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
	INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
	INPUT_FILES = 
	OUTPUT_FILES = 
    SCRIPT = $BIN_PATH/epa_driver_toric.py

 
# Time loop sepecification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINIS, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)
[TIME_LOOP]
   MODE = REGULAR
   START = 0.75
   FINISH = 1.0
   NSTEP  = 2
   VALUES = 
   
 
