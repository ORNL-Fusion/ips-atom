&state_data

! rho grid length for thermal plasma species
 nrho = 51
 
!  KDENS_RFMIN:
!   Specification:  N  kdens_rfmin = "data"
!   Declaration:  CHARACTER*32 ps%kdens_rfmin
! 	= "fraction" => nmini(i) = fracmin(i)*ne
! 	= any other value (e.g. "data" or "model") then
! 	the minority density is set by some other
! 	means (e.g. read in from another data source).
 kdens_rf_min = "fraction'
 
! ISTHERMAL:
!  Specification:  I  isThermal(nspec_rfmin)
!  Declaration:  INTEGER ps%isThermal(ps%nspec_rfmin)
!     =1 if minority specie is thermalized
!     =0: never set; =2: non-thermal.
 isThermal = 1,

!  FRACMIN:
!   Specification:  R|units=- fracmin(nspec_rfmin)
!   Declaration:  REAL(KIND=rspec) ps%fracmin(ps%nspec_rfmin)
! 	minority density fraction if kdens_rfmin="fraction"
! 	if so, it must have non-zero positive value for each minority ion specie.
! 	sum(fracmin) << 1 is expected.
 fracmin = 0.02,
 
! POWER_IC:
!  Specification:  R|units=W  power_ic(nicrf_src)
!  Declaration:  REAL(KIND=rspec) ps%power_ic(ps%nicrf_src)
!  Units:  W
!     power on each ICRF source
  power_ic = 3.e6,
  
 /

&evolving_model_data

Te_profile_model_name = 'Power_Parabolic',
Te_0 = 325., Te_edge = 0.56875, alpha_Te_1 = 4, alpha_Te_2 = 2,

ne_profile_model_name = 'Power_Parabolic',
ne_0 = 2.13e20, ne_edge = 1.1289e20, alpha_ne_1 = 4, alpha_ne_2 = 2

Ti_profile_model_name = 'fraction_of_electron'
frac_Ti(1) = 1.0, 1.0, 1.0,

ni_profile_model_name = 'fraction_of_electron'
frac_ni(1) = 0.208, 0.296, 0.02,

 /