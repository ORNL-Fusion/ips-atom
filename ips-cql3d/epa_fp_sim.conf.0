IPS_ROOT = /p/swim/bharvey/ips           # Root of IPS component and binary tree
SIM_NAME = S12348                                   # Name of current simulation
SIM_ROOT = $IPS_ROOT/$SIM_NAME                      # Where to put results from this simulation

INIT =                                              # How is the simulation initialized 
                                                    # (generate the very first state - if needed)
STATE_WORK_DIR = $SIM_ROOT/work/plasma_state # Where to put plasma state files as the simulation evolves
RUN_ID = $SIM_NAME
OUTPUT_PREFIX = 
CURRENT_STATE = ${RUN_ID}_ps.cdf
PRIOR_STATE = ${RUN_ID}_psp.cdf
CURRENT_EQDSK = ${RUN_ID}_ps.geq


#COMPONENTS = AORSA TORIC CQL3D PROFILE_ADVANCE WAEL_DRIVER EPA_DRIVER EPA      # List of available components
                                                    # (each one MUST have its own config section)

#STATE_FILES = $CURRENT_STATE $PRIOR_STATE $CURRENT_EQDSK   # What files constitute the plasma state
STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK   # What files constitute the plasma state

PLATFORM =                                          # Simulation Platform
BATCH_SYSTEM =                                      # Which Batch system to use
MPIRUN = mpirun                                     # How are MPI jobs launched (interactively)
SIMULATION_MODE = SINGLE_STEP | RESTART             # Simulation mode 
INITIALIZATION_MODE =                               # Initialization Mode
MACHINE_CONFIG_FILE =                               # Machine configuration file

[PORTS]
   NAMES = DRIVER EPA FOKKER_PLANCK
   [[DRIVER]]                                       # REQUIRED Port section 
      IMPLEMENTATION = EPA_DRIVER
   [[INIT]]                                         # REQUIRED Port section 
      IMPLEMENTATION = 

   [[RF_IC]]
      IMPLEMENTATION = AORSA
      
   [[EPA]]
      IMPLEMENTATION = TSC
       
   [[FOKKER_PLANCK]]
      IMPLEMENTATION = CQL3D   

# Individual configuration sections
[WAEL_INIT]
   CLASS = drivers                                  # Class of initialization   
   SUB_CLASS = elwasif	                            # Sub class of initialization
   INPUT_PATH = $IPS_ROOT/components/$CLASS/$SUB_CLASS    # Where to look for input files
   INPUT_FILES = state.in g096028.02650             # The aforementioned input files 
   OUTPUT_FILES = $CURRENT_STATE                    # What's generated (typically state files)
   BIN_PATH = $IPS_ROOT/bin                         # Where to look for binaries
   INIT_BIN = swim_state_init                       # Aforementioned binaries

# Component sepcification (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component
[WAEL_DRIVER]
    CLASS = drivers
    SUB_CLASS = elwasif
    NAME = testDriver
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
	INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
	INPUT_FILES = 
	OUTPUT_FILES = $CURRENT_STATE
    SCRIPT = $BIN_PATH/elwasif_driver.py
         
[AORSA]
    CLASS = rf
    SUB_CLASS = ic
    NAME = aorsa
    NPROC = 4
    BIN_PATH = $IPS_ROOT/bin
	INPUT_DIR = $IPS_ROOT/components/$CLASS/$NAME
	INPUT_FILES = aorsa2d.in grfont.dat ZTABLE.TXT g096028.02650
	OUTPUT_FILES = out_swim out15 aorsa2d.ps aorsa2d.in
    SCRIPT = $BIN_PATH/rf_ic_aorsa.py

[CQL3D]
    CLASS = fp
    SUB_CLASS = 
    NAME = cql3d
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
	INPUT_DIR = $IPS_ROOT/components/$CLASS/$NAME
	INPUT_FILES = cqlinput.1r.1 cqlinput.1r.2 eqdskin grfont.dat
	OUTPUT_FILES = $SIM_NAME.ps $SIM_NAME.nc cqlinput distrfunc
    SCRIPT = $BIN_PATH/fp_cql3d.py


[CHANGE_POWER]
    CLASS = state
    SUB_CLASS = utilities
    NAME = advanceProfile
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/drivers/elwasif
	INPUT_FILES = 
	OUTPUT_FILES = 
    SCRIPT = $BIN_PATH/state_utilities_profile.py

[TSC]
    CLASS = epa
    SUB_CLASS = 
    NAME = tsc
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/epa/tsc
    INPUT_FILES = inputa.$SIM_NAME ptransp_modify.dat ptransp_template.dat wall_data 
    OUTPUT_FILES = outputa sprsina sprsoua tsc.cgm inputa log.tsc $STATE_FILES
    SCRIPT = $BIN_PATH/epa_tsc2.py
    
[EPA_DRIVER]
    CLASS = drivers
    SUB_CLASS = ku
    NAME = epaDriver
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
	INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
	INPUT_FILES = 
	OUTPUT_FILES = 
    SCRIPT = $BIN_PATH/epa_fp_driver.py

[EPA_INIT]
   CLASS = drivers
   SUB_CLASS = ku
   INPUT_PATH  = $IPS_ROOT/components/drivers/lpku
   INPUT_FILES = 
   OUTPUT_FILES = 
   BIN_PATH = $IPS_ROOT/bin
   INIT_BIN = 
 
# Time loop sepecification (two modes for now) EXPLICIT | REGULAR
# For MODE = REGULAR, the framework uses the variables START, FINIS, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)
[TIME_LOOP]
   MODE = REGULAR
   START = 3.1
   FINISH = 3.11
   NSTEP  = 2
   VALUES = 
   
 
