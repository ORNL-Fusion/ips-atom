# Platform specific data  -------------------------------------------------------------------------
# The following variables are specific to the platform used
# and should be common to all IPS simulations on that platform.  Therefore these are
# defined in a platform specific configuration file e.g. "franklin.config" which is
# read by the framework and combined with this config file.  The path to the platform
# config file is specified on the ips command line. 
# Platform config settings can be over-ridden by uncommenting any of the lines below and
# supplying new values

#HOST = 
#MPIRUN = 
#PHYS_BIN_ROOT = 
#DATA_TREE_ROOT =
#PORTAL_URL = 
#RUNID_URL  = 

# User specific data ------------------------------------------------------------------------------
# The following data is specific to the user.  These global parameters are used later in this config 
# file to define component config parameters.  The intent is to gather user specific data into one
# place to make it easier to exchange config files between users.

USER_W3_DIR = /project/projectdirs/m876/www/dbb
USER_W3_BASEURL = http://portal.nersc.gov/project/m876/dbb


# Simulation specific data -------------------------------------------------------------------------

RUN_ID = ss            # Indentifier for this simulation run
TOKAMAK_ID = ITER
SHOT_NUMBER = 36001              # Identifier for specific case for this tokamak (should be character integer)

SIM_NAME =  ${RUN_ID}_${SHOT_NUMBER}_Vmod_2

OUTPUT_PREFIX = 
LOG_FILE = ${RUN_ID}_Vmod_2_sim.log 
LOG_LEVEL = DEBUG 

# Root of IPS component and binary tree
IPS_ROOT = /global/homes/u/u2115/ips_9_23_11_hopper

# Simulation root - path of the simulation directory that will be constructed by the framework
SIM_ROOT = /scratch/scratchdirs/u2115/Poli_scans/monitor_5_test/${SIM_NAME}

# Stuff for connecting to the SWIM portal
RUN_COMMENT = Test monitor_5 Vmod EPA TSC TORIC NUBEAM ss35001 16MW FFAC x10 extra time points
TAG = ss35001					# A tag that enables related runs to be retrieved together
USER = Batchelor					# Optional, if missing the unix username is used

# SIMULATION_MODE = NORMAL or RESTART.  For RESTART must specify a restart time and restart
# directory.  The restart time must coincide with a checkpoint save time.  The restart 
# directory can be specified as $SIM_ROOT if there is an existing current simulation there. 
# This will append to the current simulation

SIMULATION_MODE = NORMAL
RESTART_TIME = 3.0
RESTART_ROOT = $SIM_ROOT

# Where to put plasma state files as the simulation evolves
PLASMA_STATE_WORK_DIR = $SIM_ROOT/work/plasma_state

# Config variables defining simulation specific names for plasma state files
CURRENT_STATE = ${SIM_NAME}_ps.cdf
PRIOR_STATE = ${SIM_NAME}_psp.cdf
NEXT_STATE = ${SIM_NAME}_psn.cdf
CURRENT_EQDSK = ${SIM_NAME}_ps.geq
CURRENT_CQL = ${SIM_NAME}_ps_CQL.dat
CURRENT_DQL = ${SIM_NAME}_ps_DQL.nc
CURRENT_JSDSK = ${SIM_NAME}_ps.jso

# List of files that constitute the plasma state
PLASMA_STATE_FILES1 = $CURRENT_STATE $PRIOR_STATE
PLASMA_STATE_FILES2 = $PLASMA_STATE_FILES1  $CURRENT_EQDSK  $CURRENT_JSDSK
PLASMA_STATE_FILES = $PLASMA_STATE_FILES2 dakota.out

# Names of ports to be used in this simulation.  
# An implementation and configuration must be specified for each port.

[PORTS]
   NAMES = INIT DRIVER MONITOR EPA RF_IC NB

# Required ports - DRIVER and INIT   
   [[DRIVER]]
      IMPLEMENTATION = GENERIC_DRIVER 

   [[INIT]]
      IMPLEMENTATION = minimal_state_init 

# Physics ports

  [[RF_IC]]
#      IMPLEMENTATION = model_RF_IC 
#     IMPLEMENTATION = rf_aorsa 
      IMPLEMENTATION = rf_toric                       # FLR wave code component     

  [[FP]]
      IMPLEMENTATION = minority_model_FP

   [[EPA]]
      IMPLEMENTATION = TSC

   [[NB]]
      IMPLEMENTATION = NUBEAM
           
   [[MONITOR]]
      IMPLEMENTATION = monitor_comp_4   

# Individual configuration sections

# Component configuration (entries similar for all components)
# NAME entry MUST match the name of the python class that implements the component

[minimal_state_init]
    CLASS = minimal_state_init
    SUB_CLASS = dbb
    NAME = minimal_state_init
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = $CURRENT_STATE
        RESTART_FILES = $PLASMA_STATE_FILES
    SCRIPT = $BIN_PATH/minimal_state_init.py

[GENERIC_DRIVER]
    CLASS = drivers
    SUB_CLASS = dbb
    NAME = generic_driver 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
        INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = 
        OUTPUT_FILES = 
        RESTART_FILES =
#        PLASMA_STATE_FILES = PLASMA_STATE_FILES
        ARCHIVE_STATE_ON_OUTPUT = TRUE
    SCRIPT = $BIN_PATH/generic_driver.py
         
[TSC]
    CLASS = epa
    SUB_CLASS = 
    NAME = tsc
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
#    TSC_BIN = /project/projectdirs/m876/phys-bin/phys/tsc/bin/tlsc_091211
    TSC_BIN = $PHYS_BIN_ROOT/tsc/bin/tlsc_022912
    INPUT_DIR = $DATA_TREE_ROOT/tsc/ITER/Poli_scans/36001/NB_ICRF_t0
    YEAR = 2012
    INPUT_SUFFIX = int
    INPUT_FILES = input.$INPUT_SUFFIX ITER_SJ.mdescr wall_data input.lhh ray.dat
    OUTPUT_FILES = output.$INPUT_SUFFIX input.$INPUT_SUFFIX log.tsc tsc.cgm.$INPUT_SUFFIX lhcdou.$INPUT_SUFFIX ray.dat
#    OUTPUT_FILES = output.$INPUT_SUFFIX input.$INPUT_SUFFIX log.tsc tsc.cgm.$INPUT_SUFFIX lhcdou.$INPUT_SUFFIX ray.dat.$INPUT_SUFFIX
#    PLASMA_STATE_FILES = $CURRENT_STATE $PRIOR_STATE $NEXT_STATE $CURRENT_EQDSK $CURRENT_JSDSK
    RESTART_FILES = $INPUT_FILES sprsin.$INPUT_SUFFIX ray.dat lhcdou.$INPUT_SUFFIX time_point_dict
    SCRIPT = $IPS_ROOT/bin/epa_tsc_Vmod.py
        USING_DAKOTA = True
        FBCHI_scale = 1.
        FHMODEI_scale = 1.0 
        PCUR_scale = 1.0
        FFAC_scale = 10.
        Tped_target = 3.55e3
        Tped_delta = 0.15
        H98_target = 1.58
        H98_delta = 0.03
        Ip_delta = 0.003

[model_RF_IC]
    CLASS = rf
    SUB_CLASS = model_RF_IC
    NAME = model_RF_IC 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = model_RF_IC_input.nml
        OUTPUT_FILES =
    SCRIPT = $BIN_PATH/model_RF_IC.py
    
[rf_aorsa]
    CLASS = rf_ic 
    SUB_CLASS = 
    NAME =  aorsa
    NPROC = 1024
    #  the PHYS_BIN_ROOT is machine specific and will be supplied by a machine
    #  config file ultimately in the framework init
    BIN_PATH = $IPS_ROOT/bin
    AORSA_BIN = $PHYS_BIN_ROOT/aorsa2d/bin/xaorsa2d
    INPUT_DIR = $IPS_ROOT/components/rf/aorsa/ITER
        INPUT_FILES = grfont.dat ZTABLE.TXT aorsa2d.in_ref iter_aorsa.in_map_1024_128_I09030
        OUTPUT_FILES = out15 aorsa2d.ps log.arosa out_swim 
    SCRIPT = $BIN_PATH/rf_ic_aorsa.py

[rf_toric]
    CLASS = rf
    SUB_CLASS = ic
    NAME = toric
    MPIRUN = aprun                                     # How are MPI jobs launched (interactively)
    NPROC = 8 
    BIN_PATH = $IPS_ROOT/bin 
    TORIC_BIN = $PHYS_BIN_ROOT/toric/bin/Ptoric.e
    GEQXPL_BIN = $PHYS_BIN_ROOT/toric/bin/geqxpl
    INPUT_DIR = $DATA_TREE_ROOT/toric/ITER/ITER_20100P07 
        INPUT_SUFFIX = 31m_NSPEC_6
        INPUT_FILES = machine.inp_$INPUT_SUFFIX equigs_gen.ind torica.inp
        OUTPUT_FILES = torica.inp machine.inp log.toric toric.nc profstat.dat equigs.data equidt.data toric_cfg.nc
       # OUTPUT_FILES = torica.inp machine.inp toric.nc profstat.dat equigs.data equidt.data toric_cfg.nc
        PLASMA_STATE_FILES = $CURRENT_STATE $CURRENT_EQDSK
        RESTART_FILES = $INPUT_FILES
    SCRIPT = $BIN_PATH/rf_ic_toric_mcmd.py

[minority_model_FP]
    CLASS = fp
    SUB_CLASS = minority_model
    NAME = minority_model_FP 
    NPROC = 1
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/$CLASS/$SUB_CLASS
        INPUT_FILES = minority_model_FP.nml
        OUTPUT_FILES =
    SCRIPT = $BIN_PATH/minority_model_FP_2.py

[NUBEAM]
    CLASS = nb
    SUB_CLASS =
    NAME = nubeam
    MPIRUN = aprun                                     # How are MPI jobs launched (interactively)
    NPROC = 16 
    NSTEP_INT = 1
    BIN_PATH = $IPS_ROOT/bin 
#    NUBEAM_BIN = /project/projectdirs/m876/extern-hopper/path3.2_nubeam_PS2.034/bin/mpi_nubeam_comp_exec 
    NUBEAM_BIN = $PHYS_BIN_ROOT/nubeam/bin/mpi_nubeam_comp_exec
    NUBEAM_UPDATE_BIN = $PHYS_BIN_ROOT/nubeam/bin/update_state
    PREACT = $PHYS_BIN_ROOT/nubeam/share/PREACT
    ADAS = $PHYS_BIN_ROOT/nubeam/share/ADAS
    INPUT_DIR = $DATA_TREE_ROOT/nubeam/ITER/hy040510/t0
    INPUT_SUFFIX = 
    INPUT_FILES = nubeam_init_files.dat nubeam_step_files.dat nubeam_init_input.dat nubeam_step_input.dat
    OUTPUT_FILES = log.nubeam log.update_state state_changes.cdf
#    PLASMA_STATE_FILES = $CURRENT_STATE 
    RESTART_FILES = *.cdf *.dat nubeam_comp_exec.RUNID 
#   SCRIPT = $BIN_PATH/nb_nubeam_pll.py
    SCRIPT = $BIN_PATH/nb_nubeam_mcmd.py

[monitor_comp_4]
    CLASS = monitor
    SUB_CLASS = 
    NAME = monitor
    NPROC = 1
    W3_DIR = $USER_W3_DIR              # Note this is user specific
    W3_BASEURL = $USER_W3_BASEURL      # Note this is user specific
    TEMPLATE_FILE= basic_time_traces.xml 
    BIN_PATH = $IPS_ROOT/bin
    INPUT_DIR = $IPS_ROOT/components/monitor/monitor_4
    INPUT_FILES = basic_time_traces.xml 
    OUTPUT_FILES = monitor_file.nc
    PLASMA_STATE_FILES = $CURRENT_STATE
    RESTART_FILES = $INPUT_FILES monitor_restart monitor_file.nc
    INCLUDE_ZONE_BASED_PROFILES = True
    SCRIPT = $BIN_PATH/monitor_comp_5.py

# Checkpoint schedule -----------------------------------------------------------------------------
[CHECKPOINT]
   MODE = PHYSTIME_EXPLICIT
   PHYSTIME_VALUES = 100 150 200 250 300 350 400 450
   WALLTIME_INTERVAL = 1200
   NUM_CHECKPOINT = -1
   PROTECT_FREQUENCY = 5  

# Time loop sepecification (two modes for now) EXPLICIT | REGULAR ---------------------------------
# For MODE = REGULAR, the framework uses the variables START, FINISH, and NSTEP
# For MODE = EXPLICIT, the frame work uses the variable VALUES (space separated list of time values)

[TIME_LOOP]
    MODE = REGULAR
    START = 1.5 
    FINISH = 3.0 
    NSTEP = 3
